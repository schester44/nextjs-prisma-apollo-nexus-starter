### This file was generated by Nexus Schema
### Do not make changes to this file directly


scalar DateTime

type Mutation {
  changeSessionProject(projectId: String!): Boolean
  changeSubscriptionPlan(plan: String!, projectId: String!): Boolean
  createBillingPortalSession(projectId: String!): String
  createCheckoutSession(plan: String!, projectId: String!): String
  createProject(name: String!): Project
  deleteProject(id: String!): Boolean
  inviteMembersToProject(emails: [String], role: UserRole): Boolean
  updateProject(id: String!, name: String!): Project
}

enum PaidPlan {
  advanced
  basic
  pro
}

type Project {
  id: String!
  isPaying: Boolean
  name: String!
  subscriptions(after: SubscriptionWhereUniqueInput, before: SubscriptionWhereUniqueInput, first: Int, last: Int): [Subscription!]!
  users(after: ProjectUsersWhereUniqueInput, before: ProjectUsersWhereUniqueInput, first: Int, last: Int): [ProjectUsers!]!
}

type ProjectUsers {
  project: Project!
  user: User!
}

input ProjectUsersProjectIdUserIdCompoundUniqueInput {
  projectId: String!
  userId: Int!
}

input ProjectUsersWhereUniqueInput {
  projectId_userId: ProjectUsersProjectIdUserIdCompoundUniqueInput
}

type Query {
  currentUser: User
  project(id: String): Project
  projectUsers(projectId: String!): [User]
  projects: [Project]
}

type Subscription {
  endDate: DateTime!
  externalProductId: String!
  id: String!
  planLevel: PaidPlan
}

input SubscriptionWhereUniqueInput {
  id: String
}

type User {
  email: String
  id: Int!
  name: String
  projects(after: ProjectUsersWhereUniqueInput, before: ProjectUsersWhereUniqueInput, first: Int, last: Int): [ProjectUsers!]!
}

enum UserRole {
  ADMIN
  USER
}
