// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum ProjectUserRole {
  USER
  ADMIN
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id             String   @id @default(cuid())
  sessionToken   String   @unique
  userId         String
  expires        DateTime
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  currentProject String?
}

model User {
  id             String         @id @default(cuid())
  name           String?
  email          String?        @unique
  emailVerified  DateTime?
  image          String?
  accounts       Account[]
  sessions       Session[]
  projects       ProjectUsers[]
  projectInvites UserInvites?   @relation("user")
  usersInvited   UserInvites?   @relation("invitedBy")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model ProjectUsers {
  project   Project         @relation(fields: [projectId], references: [id])
  user      User            @relation(fields: [userId], references: [id])
  role      ProjectUserRole @default(USER)
  projectId String
  userId    String
  createdAt DateTime        @default(now())

  @@unique([projectId, userId])
}

model Project {
  id                String         @id @default(uuid())
  name              String
  users             ProjectUsers[]
  externalBillingId String?
  subscriptions     Subscription[]
}

model UserInvites {
  id              Int      @id @default(autoincrement())
  createdAt       DateTime @default(now()) @map(name: "created_at")
  userId          String
  projectId       String
  accepted        Boolean  @default(false)
  invitedByUserId String

  user      User @relation("user", fields: [userId], references: [id])
  invitedBy User @relation("invitedBy", fields: [invitedByUserId], references: [id])

  @@unique([projectId, userId])
  @@unique([projectId, invitedByUserId])
}

model Subscription {
  id                String   @id @default(uuid())
  project           Project  @relation(fields: [projectId], references: [id])
  projectId         String
  externalProductId String
  externalId        String
  startDate         DateTime @default(now())
  endDate           DateTime @default(now())
}
